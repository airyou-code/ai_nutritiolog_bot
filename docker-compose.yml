version: '3.8'

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: python -c "import asyncio; print('Bot is healthy')" || echo "1"
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - nutribot-network

  db:
    image: postgres:16-alpine
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nutrition_bot}
      POSTGRES_USER: ${POSTGRES_USER:-nutrition_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nutrition_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '127.0.0.1:5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nutrition_user} -d ${POSTGRES_DB:-nutrition_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - nutribot-network
  
  redis:
    image: redis:7.4-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass} --protected-mode yes
    env_file:
      - .env
    ports:
      - '127.0.0.1:6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -a ${REDIS_PASSWORD:-redis_pass} ping | grep -q PONG']
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - nutribot-network

networks:
  nutribot-network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local 