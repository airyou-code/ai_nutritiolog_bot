import logging

from bot.database.models.user import TelegramUser

logger = logging.getLogger(__name__)


class NutritionCalculator:
    """Service for calculating personalized nutrition requirements"""

    # Activity level multipliers for TDEE calculation
    ACTIVITY_MULTIPLIERS = {
        "sedentary": 1.2,  # –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (–æ—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        "lightly_active": 1.375,  # –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ª–µ–≥–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é)
        "moderately_active": 1.55,  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 3-5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é)
        "very_active": 1.725,  # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ç—è–∂–µ–ª—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 6-7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é)
        "extremely_active": 1.9,  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å, –æ—á–µ–Ω—å —Ç—è–∂–µ–ª—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
    }

    # Goal-based calorie adjustments
    GOAL_ADJUSTMENTS = {
        "weight_loss": -500,  # –î–µ—Ñ–∏—Ü–∏—Ç 500 –∫–∫–∞–ª –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è (~0.5 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é)
        "weight_gain": +500,  # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç 500 –∫–∫–∞–ª –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã (~0.5 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é)
        "maintain_weight": 0,  # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞
    }

    def calculate_bmr(self, user: TelegramUser) -> float | None:
        """
        Calculate Basal Metabolic Rate using Mifflin-St Jeor Equation

        For men: BMR = 10 √ó weight(kg) + 6.25 √ó height(cm) - 5 √ó age(years) + 5
        For women: BMR = 10 √ó weight(kg) + 6.25 √ó height(cm) - 5 √ó age(years) - 161
        """
        if not all([user.weight, user.height, user.age, user.gender]):
            return None

        bmr = 10 * user.weight + 6.25 * user.height - 5 * user.age

        if user.gender == "male":
            bmr += 5
        elif user.gender == "female":
            bmr -= 161
        else:
            return None

        return round(bmr, 0)

    def calculate_tdee(self, user: TelegramUser) -> float | None:
        """Calculate Total Daily Energy Expenditure"""
        bmr = self.calculate_bmr(user)
        if not bmr or not user.activity_level:
            return None

        activity_multiplier = self.ACTIVITY_MULTIPLIERS.get(user.activity_level)
        if not activity_multiplier:
            return None

        tdee = bmr * activity_multiplier
        return round(tdee, 0)

    def calculate_target_calories(self, user: TelegramUser) -> float | None:
        """Calculate target daily calories based on goal"""
        tdee = self.calculate_tdee(user)
        if not tdee or not user.goal:
            return None

        goal_adjustment = self.GOAL_ADJUSTMENTS.get(user.goal, 0)
        target_calories = tdee + goal_adjustment

        # Ensure minimum calories (not below 1200 for women, 1500 for men)
        min_calories = 1200 if user.gender == "female" else 1500
        target_calories = max(target_calories, min_calories)

        return round(target_calories, 0)

    def calculate_macros(self, user: TelegramUser) -> dict[str, float] | None:
        """
        Calculate recommended macronutrients based on goal

        General recommendations:
        - Protein: 1.6-2.2g per kg body weight (higher for muscle gain)
        - Fat: 20-35% of total calories
        - Carbs: Remaining calories
        """
        target_calories = self.calculate_target_calories(user)
        if not target_calories or not user.weight:
            return None

        # Protein calculation based on goal
        if user.goal == "weight_gain":
            protein_per_kg = 2.2  # Higher protein for muscle gain
        elif user.goal == "weight_loss":
            protein_per_kg = 2.0  # Higher protein to preserve muscle during weight loss
        else:
            protein_per_kg = 1.8  # Maintenance

        protein_grams = round(user.weight * protein_per_kg, 1)
        protein_calories = protein_grams * 4

        # Fat calculation (25% of calories for balanced approach)
        fat_calories = target_calories * 0.25
        fat_grams = round(fat_calories / 9, 1)

        # Carbs calculation (remaining calories)
        carbs_calories = target_calories - protein_calories - fat_calories
        carbs_grams = round(carbs_calories / 4, 1)

        return {
            "calories": target_calories,
            "protein": protein_grams,
            "fat": fat_grams,
            "carbs": carbs_grams,
            "protein_percent": round((protein_calories / target_calories) * 100, 1),
            "fat_percent": round((fat_calories / target_calories) * 100, 1),
            "carbs_percent": round((carbs_calories / target_calories) * 100, 1),
        }

    def get_bmi_category(self, bmi: float) -> tuple[str, str]:
        """Get BMI category and description"""
        if bmi < 18.5:
            return "underweight", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å"
        elif 18.5 <= bmi < 25:
            return "normal", "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
        elif 25 <= bmi < 30:
            return "overweight", "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å"
        elif 30 <= bmi < 35:
            return "obese_1", "–û–∂–∏—Ä–µ–Ω–∏–µ I —Å—Ç–µ–ø–µ–Ω–∏"
        elif 35 <= bmi < 40:
            return "obese_2", "–û–∂–∏—Ä–µ–Ω–∏–µ II —Å—Ç–µ–ø–µ–Ω–∏"
        else:
            return "obese_3", "–û–∂–∏—Ä–µ–Ω–∏–µ III —Å—Ç–µ–ø–µ–Ω–∏"

    def format_user_profile(self, user: TelegramUser) -> str:
        """Format user profile information"""
        if not user.has_complete_profile:
            return "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω"

        # Basic info
        gender_emoji = "üë®" if user.gender == "male" else "üë©"
        gender_text = "–ú—É–∂—Å–∫–æ–π" if user.gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"

        # Activity level
        activity_texts = {
            "sedentary": "–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π",
            "lightly_active": "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "moderately_active": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "very_active": "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "extremely_active": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        }
        activity_text = activity_texts.get(user.activity_level, user.activity_level)

        # Goal
        goal_texts = {
            "weight_loss": "üéØ –ü–æ—Ö—É–¥–µ–Ω–∏–µ",
            "weight_gain": "üí™ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
            "maintain_weight": "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
        }
        goal_text = goal_texts.get(user.goal, user.goal)

        # BMI
        bmi = user.bmi
        bmi_category, bmi_desc = self.get_bmi_category(bmi) if bmi else ("", "")

        # Calculations
        macros = self.calculate_macros(user)

        profile_text = f"""
{gender_emoji} **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

üìä **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user.age} –ª–µ—Ç
‚Ä¢ –í–µ—Å: {user.weight} –∫–≥
‚Ä¢ –†–æ—Å—Ç: {user.height} —Å–º
‚Ä¢ –ü–æ–ª: {gender_text}

üìà **–ò–ú–¢:** {bmi} ({bmi_desc})

üèÉ‚Äç‚ôÇÔ∏è **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {activity_text}
{goal_text}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å:**
"""

        if macros:
            profile_text += f"""
üî• **–ö–∞–ª–æ—Ä–∏–∏:** {macros["calories"]:.0f} –∫–∫–∞–ª
ü•© **–ë–µ–ª–∫–∏:** {macros["protein"]}–≥ ({macros["protein_percent"]}%)
ü•ë **–ñ–∏—Ä—ã:** {macros["fat"]}–≥ ({macros["fat_percent"]}%)
üçû **–£–≥–ª–µ–≤–æ–¥—ã:** {macros["carbs"]}–≥ ({macros["carbs_percent"]}%)
"""
        else:
            profile_text += "\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"

        return profile_text

    def get_activity_levels(self) -> dict[str, str]:
        """Get available activity levels with descriptions"""
        return {
            "sedentary": "–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (–æ—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)",
            "lightly_active": "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-3 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é)",
            "moderately_active": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é)",
            "very_active": "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (6-7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é)",
            "extremely_active": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)",
        }

    def get_goals(self) -> dict[str, str]:
        """Get available goals with descriptions"""
        return {
            "weight_loss": "üéØ –ü–æ—Ö—É–¥–µ–Ω–∏–µ (-0.5 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é)",
            "maintain_weight": "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
            "weight_gain": "üí™ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã (+0.5 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é)",
        }


# Create global instance
nutrition_calculator = NutritionCalculator()
