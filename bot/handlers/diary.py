import logging
from datetime import date, timedelta

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.database.connection import get_db_session
from bot.database.operations.food_ops import (
    delete_food_entry,
    get_food_entry_by_id,
    get_user_daily_nutrition_summary,
    get_user_food_entries_by_date,
)
from bot.database.operations.user_ops import get_user_by_id
from bot.keyboards.inline import (
    get_diary_keyboard,
    get_food_entry_actions_keyboard,
    get_yes_no_keyboard,
)
from bot.services.nutrition_analyzer import nutrition_analyzer
from bot.utils.helpers import (
    safe_answer_callback,
    safe_edit_callback_message,
)

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "view_diary")
async def show_diary_menu(callback: CallbackQuery, state: FSMContext):
    """Show diary menu"""

    await safe_answer_callback(callback)

    text = """
üìä **–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è**

–í—ã–±–µ—Ä–∏ —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:
"""

    await safe_edit_callback_message(
        callback, text, reply_markup=get_diary_keyboard(), parse_mode="Markdown"
    )


@router.callback_query(F.data == "diary_today")
async def show_today_diary(callback: CallbackQuery, user_id: int):
    """Show today's food diary"""

    await safe_answer_callback(callback)

    try:
        async with get_db_session() as session:
            # Get today's entries
            today = date.today()
            entries = await get_user_food_entries_by_date(session, user_id, today)

            # Get daily summary
            daily_summary = await get_user_daily_nutrition_summary(
                session, user_id, today
            )

            # Get user goals
            user = await get_user_by_id(session, user_id)

        if not entries:
            text = f"""
üìÖ **–î–Ω–µ–≤–Ω–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime("%d.%m.%Y")})**

ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

–î–æ–±–∞–≤—å –ø–µ—Ä–≤–æ–µ –±–ª—é–¥–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!
"""
            await callback.message.edit_text(
                text, reply_markup=get_diary_keyboard(), parse_mode="Markdown"
            )
        else:
            text = f"""
üìÖ **–î–Ω–µ–≤–Ω–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime("%d.%m.%Y")})**

"""

            # Add daily summary
            if user:
                goals = {
                    "daily_calories_goal": user.daily_calories_goal,
                    "daily_protein_goal": user.daily_protein_goal,
                    "daily_fat_goal": user.daily_fat_goal,
                    "daily_carbs_goal": user.daily_carbs_goal,
                }
                text += nutrition_analyzer.format_daily_summary(daily_summary, goals)
            else:
                text += nutrition_analyzer.format_daily_summary(daily_summary)

            text += "\n\nüçΩ **–ó–∞–ø–∏—Å–∏ –æ –µ–¥–µ:**\n_(–ù–∞–∂–º–∏ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π)_"

            # Create keyboard with food entries
            builder = InlineKeyboardBuilder()

            for i, entry in enumerate(entries, 1):
                entry_text = f"{i}. {entry.food_name} - {entry.total_calories:.0f} –∫–∫–∞–ª"
                if entry.portion_weight:
                    entry_text += f" ({entry.portion_weight}–≥)"
                entry_text += f" | {entry.created_at.strftime('%H:%M')}"

                builder.row(
                    InlineKeyboardButton(
                        text=entry_text, callback_data=f"view_entry:{entry.id}"
                    )
                )

            # Add navigation buttons
            builder.row(
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="diary_stats")
            )
            builder.row(
                InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )

            await callback.message.edit_text(
                text, reply_markup=builder.as_markup(), parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"Error showing today's diary: {e}")

        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω–µ–≤–Ω–∏–∫–∞", reply_markup=get_diary_keyboard()
        )


@router.callback_query(F.data.startswith("view_entry:"))
async def view_food_entry(callback: CallbackQuery, user_id: int):
    """Show detailed view of a food entry"""

    await safe_answer_callback(callback)

    try:
        entry_id = int(callback.data.split(":")[1])

        async with get_db_session() as session:
            entry = await get_food_entry_by_id(session, entry_id, user_id)

        if not entry:
            await callback.message.edit_text(
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_diary_keyboard()
            )
            return

        # Format entry details
        text = f"""
üçΩ **–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ**

**{entry.food_name}**

üìä **–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:**
üî• –ö–∞–ª–æ—Ä–∏–∏: {entry.total_calories:.1f} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {entry.total_protein:.1f} –≥
ü•ë –ñ–∏—Ä—ã: {entry.total_fat:.1f} –≥  
üçû –£–≥–ª–µ–≤–æ–¥—ã: {entry.total_carbs:.1f} –≥

"""

        if entry.portion_weight:
            text += f"‚öñÔ∏è **–í–µ—Å –ø–æ—Ä—Ü–∏–∏:** {entry.portion_weight} –≥\n"

        if entry.portion_size:
            text += f"üìè **–†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏:** {entry.portion_size}\n"

        if entry.food_description:
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {entry.food_description}\n"

        text += f"""
üïê **–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:** {entry.created_at.strftime("%d.%m.%Y %H:%M")}
üìù **–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:** {"üì∏ –§–æ—Ç–æ" if entry.input_method == "photo" else "‚úçÔ∏è –¢–µ–∫—Å—Ç"}
"""

        await callback.message.edit_text(
            text,
            reply_markup=get_food_entry_actions_keyboard(entry.id),
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"Error viewing food entry: {e}")

        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏", reply_markup=get_diary_keyboard()
        )


@router.callback_query(F.data.startswith("delete_entry:"))
async def confirm_delete_entry(callback: CallbackQuery, user_id: int):
    """Confirm deletion of food entry"""

    await safe_answer_callback(callback)

    try:
        entry_id = int(callback.data.split(":")[1])

        async with get_db_session() as session:
            entry = await get_food_entry_by_id(session, entry_id, user_id)

        if not entry:
            await callback.message.edit_text(
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_diary_keyboard()
            )
            return

        text = f"""
üóë **–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**

–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?

**{entry.food_name}**
üî• {entry.total_calories:.1f} –∫–∫–∞–ª
üïê {entry.created_at.strftime("%d.%m.%Y %H:%M")}

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
"""

        await callback.message.edit_text(
            text,
            reply_markup=get_yes_no_keyboard(
                yes_callback=f"confirm_delete:{entry_id}",
                no_callback=f"view_entry:{entry_id}",
            ),
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"Error confirming delete: {e}")

        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é", reply_markup=get_diary_keyboard()
        )


@router.callback_query(F.data.startswith("confirm_delete:"))
async def delete_entry_confirmed(callback: CallbackQuery, user_id: int):
    """Actually delete the food entry"""

    await safe_answer_callback(callback)

    try:
        entry_id = int(callback.data.split(":")[1])

        async with get_db_session() as session:
            # Get entry info before deletion for confirmation message
            entry = await get_food_entry_by_id(session, entry_id, user_id)

            if not entry:
                await callback.message.edit_text(
                    "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_diary_keyboard()
                )
                return

            entry_name = entry.food_name
            entry_calories = entry.total_calories

            # Delete the entry
            deleted = await delete_food_entry(session, entry_id, user_id)
            await session.commit()

            if deleted:
                text = f"""
‚úÖ **–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞**

–ó–∞–ø–∏—Å—å **{entry_name}** ({entry_calories:.1f} –∫–∫–∞–ª) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞.

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
"""

                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(
                        text="üìÖ –ö –¥–Ω–µ–≤–Ω–∏–∫—É", callback_data="diary_today"
                    )
                )
                builder.row(
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                    )
                )

                await callback.message.edit_text(
                    text, reply_markup=builder.as_markup(), parse_mode="Markdown"
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", reply_markup=get_diary_keyboard()
                )

    except Exception as e:
        logger.error(f"Error deleting food entry: {e}")

        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏", reply_markup=get_diary_keyboard()
        )


@router.callback_query(F.data == "diary_stats")
async def show_diary_stats(callback: CallbackQuery, user_id: int):
    """Show diary statistics"""

    await safe_answer_callback(callback)

    try:
        async with get_db_session() as session:
            # Get current week (Monday to Sunday)
            today = date.today()
            days_since_monday = today.weekday()  # Monday is 0

            # Calculate week start (Monday) and end (Sunday)
            week_start = today - timedelta(days=days_since_monday)
            week_end = week_start + timedelta(days=6)

            # Calculate averages for the week
            total_calories = 0
            total_protein = 0
            total_fat = 0
            total_carbs = 0
            days_with_data = 0

            # Daily breakdown for the week
            daily_data = []
            week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

            for i in range(7):
                check_date = week_start + timedelta(days=i)
                daily_summary = await get_user_daily_nutrition_summary(
                    session, user_id, check_date
                )

                # Store daily data
                daily_data.append(
                    {
                        "day": week_days[i],
                        "date": check_date,
                        "calories": daily_summary["total_calories"],
                        "entries": daily_summary["entries_count"],
                    }
                )

                if daily_summary["entries_count"] > 0:
                    total_calories += daily_summary["total_calories"]
                    total_protein += daily_summary["total_protein"]
                    total_fat += daily_summary["total_fat"]
                    total_carbs += daily_summary["total_carbs"]
                    days_with_data += 1

            if days_with_data == 0:
                text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é**

üìÖ {week_start.strftime("%d.%m")} - {week_end.strftime("%d.%m.%Y")} (–ø–Ω-–≤—Å)

üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

–î–æ–±–∞–≤—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!
"""
            else:
                avg_calories = total_calories / days_with_data
                avg_protein = total_protein / days_with_data
                avg_fat = total_fat / days_with_data
                avg_carbs = total_carbs / days_with_data

                # Build daily breakdown
                daily_breakdown = "\nüìä **–ü–æ –¥–Ω—è–º:**\n"
                for day_data in daily_data:
                    status = "‚úÖ" if day_data["entries"] > 0 else "‚≠ï"
                    date_str = day_data["date"].strftime("%d.%m")
                    if day_data["entries"] > 0:
                        daily_breakdown += f"{status} {day_data['day']} {date_str}: {day_data['calories']:.0f} –∫–∫–∞–ª\n"
                    else:
                        daily_breakdown += (
                            f"{status} {day_data['day']} {date_str}: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\n"
                        )

                text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é**

üìÖ {week_start.strftime("%d.%m")} - {week_end.strftime("%d.%m.%Y")} (–ø–Ω-–≤—Å)

üìà **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –¥–µ–Ω—å:**
üî• –ö–∞–ª–æ—Ä–∏–∏: {avg_calories:.0f} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {avg_protein:.1f} –≥
ü•ë –ñ–∏—Ä—ã: {avg_fat:.1f} –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {avg_carbs:.1f} –≥

üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_with_data} –∏–∑ 7
{daily_breakdown}
üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–µ–¥–µ—à—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —É—á–µ—Ç" if days_with_data >= 5 else "üìù –°—Ç–∞—Ä–∞–π—Å—è –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"}
"""

        await safe_edit_callback_message(
            callback, text, reply_markup=get_diary_keyboard(), parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error showing diary stats: {e}")

        await safe_edit_callback_message(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_diary_keyboard(),
        )
