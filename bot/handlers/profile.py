import logging
from typing import Union

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.profile import (
    get_profile_menu_keyboard,
    get_profile_edit_keyboard, 
    get_gender_keyboard,
    get_activity_keyboard,
    get_goal_keyboard,
    get_back_to_profile_keyboard
)
from bot.keyboards.inline import get_settings_keyboard
from bot.database.connection import get_db_session
from bot.database.operations.user_ops import (
    get_user_by_id,
    update_user_profile,
    update_user_goals_from_profile
)
from bot.services.nutrition_calculator import nutrition_calculator
from bot.utils.helpers import safe_answer_callback

logger = logging.getLogger(__name__)

router = Router()


class ProfileStates(StatesGroup):
    waiting_for_age = State()
    waiting_for_weight = State()
    waiting_for_height = State()


@router.callback_query(F.data == "user_profile")
async def show_profile_menu(callback: CallbackQuery, user_id: int):
    """Show user profile menu"""
    
    await safe_answer_callback(callback)
    
    text = """
üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º –ø–∏—Ç–∞–Ω–∏—è:

‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç
‚Ä¢ –ü–æ–ª –∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
‚Ä¢ –¶–µ–ª–∏ (–ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ)

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —è —Ä–∞—Å—Å—á–∏—Ç–∞—é —Ç–≤–æ–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£.
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_profile_menu_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "show_profile")
async def show_user_profile(callback: CallbackQuery, user_id: int):
    """Show user profile information"""
    
    await safe_answer_callback(callback)
    
    try:
        async with get_db_session() as session:
            user = await get_user_by_id(session, user_id)
            
            if not user:
                await callback.message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_back_to_profile_keyboard()
                )
                return
            
            profile_text = nutrition_calculator.format_user_profile(user)
            
            await callback.message.edit_text(
                profile_text,
                reply_markup=get_back_to_profile_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error showing user profile: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è",
            reply_markup=get_back_to_profile_keyboard()
        )


@router.callback_query(F.data == "edit_profile")
async def show_profile_edit_menu(callback: CallbackQuery):
    """Show profile editing menu"""
    
    await safe_answer_callback(callback)
    
    text = """
‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**

–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_profile_edit_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    """Start editing age"""
    
    await safe_answer_callback(callback)
    
    text = """
üéÇ **–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç**

–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 15 –¥–æ 80 –ª–µ—Ç:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_profile_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(ProfileStates.waiting_for_age)


@router.message(ProfileStates.waiting_for_age, F.text)
async def handle_age_input(message: Message, state: FSMContext, user_id: int):
    """Handle age input"""
    
    try:
        age = int(message.text.strip())
        
        if not (15 <= age <= 80):
            await message.answer(
                "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 15 –¥–æ 80 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_to_profile_keyboard()
            )
            return
        
        # Update database
        async with get_db_session() as session:
            await update_user_profile(session, user_id, age=age)
        
        await message.answer(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {age} –ª–µ—Ç",
            reply_markup=get_profile_edit_keyboard()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö):",
            reply_markup=get_back_to_profile_keyboard()
        )


@router.callback_query(F.data == "edit_weight")
async def edit_weight(callback: CallbackQuery, state: FSMContext):
    """Start editing weight"""
    
    await safe_answer_callback(callback)
    
    text = """
‚öñÔ∏è **–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–µ—Å**

–í–≤–µ–¥–∏ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_profile_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(ProfileStates.waiting_for_weight)


@router.message(ProfileStates.waiting_for_weight, F.text)
async def handle_weight_input(message: Message, state: FSMContext, user_id: int):
    """Handle weight input"""
    
    try:
        weight = float(message.text.strip().replace(",", "."))
        
        if not (30 <= weight <= 300):
            await message.answer(
                "‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_to_profile_keyboard()
            )
            return
        
        # Update database
        async with get_db_session() as session:
            await update_user_profile(session, user_id, weight=weight)
        
        await message.answer(
            f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {weight} –∫–≥",
            reply_markup=get_profile_edit_keyboard()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):",
            reply_markup=get_back_to_profile_keyboard()
        )


@router.callback_query(F.data == "edit_height")
async def edit_height(callback: CallbackQuery, state: FSMContext):
    """Start editing height"""
    
    await safe_answer_callback(callback)
    
    text = """
üìè **–£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç**

–í–≤–µ–¥–∏ —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_profile_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(ProfileStates.waiting_for_height)


@router.message(ProfileStates.waiting_for_height, F.text)
async def handle_height_input(message: Message, state: FSMContext, user_id: int):
    """Handle height input"""
    
    try:
        height = int(message.text.strip())
        
        if not (140 <= height <= 220):
            await message.answer(
                "‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 140 –¥–æ 220 —Å–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_to_profile_keyboard()
            )
            return
        
        # Update database
        async with get_db_session() as session:
            await update_user_profile(session, user_id, height=height)
        
        await message.answer(
            f"‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {height} —Å–º",
            reply_markup=get_profile_edit_keyboard()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):",
            reply_markup=get_back_to_profile_keyboard()
        )


@router.callback_query(F.data == "edit_gender")
async def edit_gender(callback: CallbackQuery):
    """Show gender selection"""
    
    await safe_answer_callback(callback)
    
    text = """
‚ößÔ∏è **–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª**

–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_gender_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("gender_"))
async def handle_gender_selection(callback: CallbackQuery, user_id: int):
    """Handle gender selection"""
    
    await safe_answer_callback(callback)
    
    gender = callback.data.split("_")[1]  # male or female
    gender_text = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    
    try:
        async with get_db_session() as session:
            await update_user_profile(session, user_id, gender=gender)
        
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {gender_text}",
            reply_markup=get_profile_edit_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error updating gender: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞",
            reply_markup=get_profile_edit_keyboard()
        )


@router.callback_query(F.data == "edit_activity")
async def edit_activity(callback: CallbackQuery):
    """Show activity level selection"""
    
    await safe_answer_callback(callback)
    
    text = """
üèÉ‚Äç‚ôÇÔ∏è **–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**

–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é?
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_activity_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("activity_"))
async def handle_activity_selection(callback: CallbackQuery, user_id: int):
    """Handle activity level selection"""
    
    await safe_answer_callback(callback)
    
    activity_level = callback.data.replace("activity_", "")
    activity_levels = nutrition_calculator.get_activity_levels()
    activity_text = activity_levels.get(activity_level, activity_level)
    
    try:
        async with get_db_session() as session:
            await update_user_profile(session, user_id, activity_level=activity_level)
        
        await callback.message.edit_text(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω:\n{activity_text}",
            reply_markup=get_profile_edit_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error updating activity level: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            reply_markup=get_profile_edit_keyboard()
        )


@router.callback_query(F.data == "edit_goal")
async def edit_goal(callback: CallbackQuery):
    """Show goal selection"""
    
    await safe_answer_callback(callback)
    
    text = """
üéØ **–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å**

–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å —Å –ø–æ–º–æ—â—å—é –ø–∏—Ç–∞–Ω–∏—è?
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_goal_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("goal_"))
async def handle_goal_selection(callback: CallbackQuery, user_id: int):
    """Handle goal selection"""
    
    await safe_answer_callback(callback)
    
    goal = callback.data.replace("goal_", "")
    goals = nutrition_calculator.get_goals()
    goal_text = goals.get(goal, goal)
    
    try:
        async with get_db_session() as session:
            await update_user_profile(session, user_id, goal=goal)
        
        await callback.message.edit_text(
            f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n{goal_text}",
            reply_markup=get_profile_edit_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error updating goal: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏",
            reply_markup=get_profile_edit_keyboard()
        )


@router.callback_query(F.data == "recalculate_norms")
async def recalculate_norms(callback: CallbackQuery, user_id: int):
    """Recalculate nutrition norms based on profile"""
    
    await safe_answer_callback(callback)
    
    try:
        async with get_db_session() as session:
            user = await get_user_by_id(session, user_id)
            
            if not user:
                await callback.message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_back_to_profile_keyboard()
                )
                return
            
            if not user.has_complete_profile:
                await callback.message.edit_text(
                    "‚ùå **–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é**\n\n"
                    "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                    "‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç\n"
                    "‚Ä¢ –í–µ—Å\n"
                    "‚Ä¢ –†–æ—Å—Ç\n"
                    "‚Ä¢ –ü–æ–ª\n"
                    "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                    "‚Ä¢ –¶–µ–ª—å",
                    reply_markup=get_profile_edit_keyboard(),
                    parse_mode="Markdown"
                )
                return
            
            # Calculate macros
            macros = nutrition_calculator.calculate_macros(user)
            
            if not macros:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—ã –ø–∏—Ç–∞–Ω–∏—è",
                    reply_markup=get_back_to_profile_keyboard()
                )
                return
            
            # Update user goals in database
            await update_user_goals_from_profile(
                session,
                user_id,
                macros["calories"],
                macros["protein"],
                macros["fat"],
                macros["carbs"]
            )
            
            # Show results
            text = f"""
‚úÖ **–ù–æ—Ä–º—ã –ø–∏—Ç–∞–Ω–∏—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã!**

üî• **–ö–∞–ª–æ—Ä–∏–∏:** {macros['calories']:.0f} –∫–∫–∞–ª
ü•© **–ë–µ–ª–∫–∏:** {macros['protein']:.1f}–≥ ({macros['protein_percent']:.1f}%)
ü•ë **–ñ–∏—Ä—ã:** {macros['fat']:.1f}–≥ ({macros['fat_percent']:.1f}%)
üçû **–£–≥–ª–µ–≤–æ–¥—ã:** {macros['carbs']:.1f}–≥ ({macros['carbs_percent']:.1f}%)

–≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —Ç–≤–æ–∏ –Ω–æ–≤—ã–µ –¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–ª–∏!
"""
            
            await callback.message.edit_text(
                text,
                reply_markup=get_back_to_profile_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error recalculating norms: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –Ω–æ—Ä–º –ø–∏—Ç–∞–Ω–∏—è",
            reply_markup=get_back_to_profile_keyboard()
        )


@router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    """Cancel editing and return to profile edit menu"""
    
    await safe_answer_callback(callback)
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_profile_edit_keyboard()
    )


@router.callback_query(F.data == "settings")
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    """Return to settings menu"""
    
    await safe_answer_callback(callback)
    await state.clear()
    
    text = """
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_settings_keyboard(),
        parse_mode="Markdown"
    ) 