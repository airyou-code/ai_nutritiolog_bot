import logging
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.inline import (
    get_text_input_mode_keyboard,
    get_portion_selection_keyboard,
    get_nutrition_confirmation_keyboard,
    get_cancel_keyboard,
    get_main_menu_keyboard
)
from bot.services.nutrition_analyzer import nutrition_analyzer
from bot.database.connection import get_db_session
from bot.database.operations.food_ops import create_food_entry
from bot.utils.helpers import safe_answer_callback, extract_numbers_from_text, estimate_portion_weight

logger = logging.getLogger(__name__)

router = Router()


class TextInputStates(StatesGroup):
    selecting_mode = State()
    waiting_for_simple_text = State()
    waiting_for_detailed_text = State()
    selecting_portion = State()
    confirming_nutrition = State()


@router.callback_query(F.data == "add_food_text")
async def start_text_input(callback: CallbackQuery, state: FSMContext):
    """Start text input process"""
    
    await safe_answer_callback(callback)
    
    text = """
‚úçÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ —Ç–µ–∫—Å—Ç–æ–º**

–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_text_input_mode_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(TextInputStates.selecting_mode)


@router.callback_query(TextInputStates.selecting_mode, F.data == "text_mode_simple")
async def start_simple_text_input(callback: CallbackQuery, state: FSMContext):
    """Start simple text input mode"""
    
    await safe_answer_callback(callback)
    
    text = """
üçΩ **–ü—Ä–æ—Å—Ç–æ–π –≤–≤–æ–¥ –±–ª—é–¥–∞**

–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å—ä–µ–ª.

üìù **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ –ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏—Ü–µ–π
‚Ä¢ –°–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å
‚Ä¢ –ë–æ—Ä—â —Å –º—è—Å–æ–º
‚Ä¢ –Ø–±–ª–æ–∫–æ
‚Ä¢ –¢–≤–æ—Ä–æ–≥ —Å –º–µ–¥–æ–º

–ò–ò —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ë–ñ–£.
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(TextInputStates.waiting_for_simple_text)


@router.callback_query(TextInputStates.selecting_mode, F.data == "text_mode_detailed")
async def start_detailed_text_input(callback: CallbackQuery, state: FSMContext):
    """Start detailed text input mode"""
    
    await safe_answer_callback(callback)
    
    text = """
üìè **–î–µ—Ç–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ –±–ª—é–¥–∞**

–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ —É–∫–∞–∂–∏ –≤–µ—Å –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏.

üìù **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ –ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏—Ü–µ–π 300–≥
‚Ä¢ –°–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å –±–æ–ª—å—à–∞—è –ø–æ—Ä—Ü–∏—è
‚Ä¢ –ë–æ—Ä—â 2 –ø–æ–ª–æ–≤–Ω–∏–∫–∞
‚Ä¢ –Ø–±–ª–æ–∫–æ —Å—Ä–µ–¥–Ω–µ–µ
‚Ä¢ –¢–≤–æ—Ä–æ–≥ 200–≥ —Å –º–µ–¥–æ–º 1 –ª–æ–∂–∫–∞

–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—à—å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –ë–ñ–£!
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(TextInputStates.waiting_for_detailed_text)


@router.message(TextInputStates.waiting_for_simple_text, F.text)
async def handle_simple_text_input(message: Message, state: FSMContext, user_id: int):
    """Handle simple text input"""
    
    food_description = message.text.strip()
    
    if len(food_description) < 2:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await process_text_input(message, state, food_description, None)


@router.message(TextInputStates.waiting_for_detailed_text, F.text)
async def handle_detailed_text_input(message: Message, state: FSMContext, user_id: int):
    """Handle detailed text input"""
    
    food_description = message.text.strip()
    
    if len(food_description) < 2:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    # Extract portion information from text
    numbers = extract_numbers_from_text(food_description)
    portion_info = None
    
    if numbers:
        # Build portion info string
        portions = []
        for unit, value in numbers.items():
            if unit == 'grams':
                portions.append(f"{value}–≥")
            elif unit == 'kg':
                portions.append(f"{value}–∫–≥")
            elif unit == 'pieces':
                portions.append(f"{value} —à—Ç—É–∫")
            # Add more unit mappings as needed
        
        if portions:
            portion_info = ", ".join(portions)
    
    await process_text_input(message, state, food_description, portion_info)


async def process_text_input(message: Message, state: FSMContext, food_description: str, portion_info: str):
    """Process text input and analyze food"""
    
    try:
        # Show processing message
        processing_msg = await message.answer(
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞...\n\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        )
        
        # Analyze food from text
        analysis = await nutrition_analyzer.analyze_food_from_text(food_description, portion_info)
        
        # Store analysis data
        await state.update_data(
            analysis=analysis,
            input_method="text",
            original_description=food_description
        )
        
        # Delete processing message
        await processing_msg.delete()
        
        # Show portion selection
        await show_text_portion_selection(message, analysis, state)
        
    except Exception as e:
        logger.error(f"Error analyzing text input: {e}")
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.clear()


async def show_text_portion_selection(message: Message, analysis: Dict, state: FSMContext):
    """Show portion selection for text input"""
    
    text = f"""
üçΩ **{analysis['food_name']}**

üìù _{analysis.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}_

–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏:
"""
    
    # Add portion options with nutrition info
    portion_options_with_nutrition = nutrition_analyzer.create_portion_options_with_nutrition(analysis)
    
    for i, option in enumerate(portion_options_with_nutrition):
        nutrition = option["nutrition"]
        text += f"\n**{option['description']}** ({option['weight']}–≥):\n"
        text += f"üî• {nutrition['total_calories']:.0f} –∫–∫–∞–ª, "
        text += f"ü•© {nutrition['total_protein']:.1f}–≥, "
        text += f"ü•ë {nutrition['total_fat']:.1f}–≥, "
        text += f"üçû {nutrition['total_carbs']:.1f}–≥\n"
    
    keyboard = get_portion_selection_keyboard(analysis["portion_options"])
    
    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.set_state(TextInputStates.selecting_portion)


# Reuse portion selection and confirmation handlers from photo_analysis
# by importing and registering them with this router

from bot.handlers.photo_analysis import (
    handle_portion_selection as photo_handle_portion_selection,
    confirm_nutrition_entry as photo_confirm_nutrition_entry,
    change_portion_selection as photo_change_portion_selection,
    show_nutrition_confirmation
)


@router.callback_query(TextInputStates.selecting_portion, F.data.startswith("select_portion:"))
async def handle_text_portion_selection(callback: CallbackQuery, state: FSMContext):
    """Handle portion selection for text input"""
    
    await safe_answer_callback(callback)
    
    portion_index = int(callback.data.split(":")[1])
    data = await state.get_data()
    analysis = data.get("analysis", {})
    
    if portion_index >= len(analysis.get("portion_options", [])):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ü–∏–∏")
        return
    
    selected_portion = analysis["portion_options"][portion_index]
    
    # Calculate nutrition for selected portion
    nutrition = nutrition_analyzer.calculate_nutrition_for_portion(
        analysis["nutrition_per_100g"],
        selected_portion["weight"]
    )
    
    # Store selected data
    await state.update_data(
        selected_portion=selected_portion,
        nutrition=nutrition
    )
    
    # Show nutrition confirmation
    await show_nutrition_confirmation(callback.message, analysis, selected_portion, nutrition, state)
    await state.set_state(TextInputStates.confirming_nutrition)


@router.callback_query(TextInputStates.confirming_nutrition, F.data == "confirm_nutrition")
async def confirm_text_nutrition_entry(callback: CallbackQuery, state: FSMContext, user_id: int):
    """Confirm and save nutrition entry from text input"""
    
    await safe_answer_callback(callback, "–°–æ—Ö—Ä–∞–Ω—è—é...")
    
    try:
        data = await state.get_data()
        analysis = data.get("analysis", {})
        selected_portion = data.get("selected_portion", {})
        nutrition = data.get("nutrition", {})
        original_description = data.get("original_description", "")
        
        async with get_db_session() as session:
            food_entry = await create_food_entry(
                session=session,
                user_id=user_id,
                food_name=analysis["food_name"],
                food_description=analysis.get("description"),
                portion_size=selected_portion["size"],
                portion_weight=selected_portion["weight"],
                calories_per_100g=analysis["nutrition_per_100g"]["calories"],
                protein_per_100g=analysis["nutrition_per_100g"]["protein"],
                fat_per_100g=analysis["nutrition_per_100g"]["fat"],
                carbs_per_100g=analysis["nutrition_per_100g"]["carbs"],
                total_calories=nutrition["total_calories"],
                total_protein=nutrition["total_protein"],
                total_fat=nutrition["total_fat"],
                total_carbs=nutrition["total_carbs"],
                input_method="text",
                ai_analysis=f"Original: {original_description}\nAnalysis: {str(analysis)}"
            )
        
        success_text = f"""
‚úÖ **–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!**

üçΩ **{food_entry.food_name}**
‚öñÔ∏è –ü–æ—Ä—Ü–∏—è: {selected_portion['description']} ({selected_portion['weight']}–≥)

{nutrition_analyzer.format_nutrition_summary(nutrition)}

üìù –ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: _{original_description}_
üïê –í—Ä–µ–º—è: —Å–µ–π—á–∞—Å
üìä –ó–∞–ø–∏—Å—å #{food_entry.id}
"""
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error saving text food entry: {e}")
        
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.clear()


@router.callback_query(TextInputStates.confirming_nutrition, F.data == "change_portion")
async def change_text_portion_selection(callback: CallbackQuery, state: FSMContext):
    """Allow user to change portion selection for text input"""
    
    await safe_answer_callback(callback)
    
    data = await state.get_data()
    analysis = data.get("analysis", {})
    
    # Show portion selection again
    text = f"""
üçΩ **{analysis['food_name']}**

üìù _{analysis.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}_

–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏:
"""
    
    # Add portion options with nutrition info
    portion_options_with_nutrition = nutrition_analyzer.create_portion_options_with_nutrition(analysis)
    
    for i, option in enumerate(portion_options_with_nutrition):
        nutrition = option["nutrition"]
        text += f"\n**{option['description']}** ({option['weight']}–≥):\n"
        text += f"üî• {nutrition['total_calories']:.0f} –∫–∫–∞–ª, "
        text += f"ü•© {nutrition['total_protein']:.1f}–≥, "
        text += f"ü•ë {nutrition['total_fat']:.1f}–≥, "
        text += f"üçû {nutrition['total_carbs']:.1f}–≥\n"
    
    keyboard = get_portion_selection_keyboard(analysis["portion_options"])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.set_state(TextInputStates.selecting_portion) 